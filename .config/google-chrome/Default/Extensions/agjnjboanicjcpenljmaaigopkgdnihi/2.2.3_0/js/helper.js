var pmd;pmd=(()=>{"use strict";var e={897:(e,t,n)=>{n.r(t),n.d(t,{apiBase:()=>k,axios:()=>y,getStorage:()=>m,getString:()=>x,getStrings:()=>w});var a=n(9669),r=n.n(a);const o="https://api.premid.app/v3/",s="font-weight: 800; padding: 2px 5px; color: white;";let i;function l(e){i!==e&&(console.groupEnd(),console.group(e),i=e)}function c(e){for(const t in e)"object"==typeof e[t]&&c(e[t]),null!==e[t]&&void 0!==e[t]||delete e[t]}async function u(e){const t=await r()({url:o,method:"post",data:{query:e}});return c(t.data),t.data}const d="en",g=3e5;let p={};function f(e){return e.split("-")[0]}async function h(e){e||(e=d),e.includes("ja")||e.includes("zh")||e.includes("ko")||(e=f(e));let t=e,n=e,a=e;switch(e){case"ja":t="ja_JP",a="ja_JP";break;case"ja_JP":n="ja";break;case"ko":t="ko_KR",a="ko_KR";break;case"ko_KR":n="ko";break;case"zh-CN":t="zh_CN",a="zh_CN";break;case"zh_CN":n="zh-CN";break;case"zh-TW":t="zh_TW",a="zh_TW";break;case"zh_TW":n="zh-TW";break;default:const e=(await u('\n\t\t\tquery {\n\t\t\t\tlangFiles(project: "extension") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t}\n\t\t\t')).data.langFiles.map((e=>e.lang));if(!e.includes(n)){const r=e.findIndex((e=>e.includes(n+"_")));r>=0&&(t=e[r],n=e[r],a=e[r])}}try{const r=await u(`\n\t\t\tquery {\n\t\t\t\twebsite: langFiles(project: "website", lang: "${t}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\textension: langFiles(project: "extension", lang: "${n}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\tpresence: langFiles(project: "presence", lang: "${a}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t}\n\t\t`);p[e]={name:r.data.website[0].translations["header.language"],loading:r.data.website[0].translations["header.loader.phrases"],extension:r.data.extension[0].translations,presence:r.data.presence[0].translations,updatedAt:Date.now()},function(e,t,n=!1){n&&(l("langManager.ts"),console.log("%cPreMiD%cSUCCESS%c "+t,s+"border-radius: 25px 0 0 25px; background: #596cae;",s+"border-radius: 0 25px 25px 0; background: #50ff50; color: black;","color: unset;"))}(0,`Updated ${e} translations`)}catch(t){return void function(e,t,n=!1){n&&(l(e),console.log("%cPreMiD%cERROR%c "+t,s+"border-radius: 25px 0 0 25px; background: #596cae;",s+"border-radius: 0 25px 25px 0; background: #ff5050;","color: unset;"))}("langManager.ts",`Error while fetching langFiles of ${e} language: ${t.message}`)}p[e]&&p[e].error?p[e]=void 0:await chrome.storage.local.set({languages:p})}const b=[];async function v(e,t){return e||(e=d),t||(t=!1),e=f(e),new Promise((n=>{if(void 0!==p[e]&&n(),b.includes(e)){let t=setInterval((()=>{void 0!==p&&void 0!==p[e]&&(clearInterval(t),n())}),5)}else b.push(e),chrome.storage.local.get("languages",(async a=>{a.languages||(a.languages={});const r=[];(t&&void 0!==a.languages.en&&Date.now()-a.languages.en.updatedAt>=g||e!==d&&void 0===a.languages.en)&&r.push(h(d)),(void 0===a.languages[e]||t&&Date.now()-a.languages[e].updatedAt>=g)&&r.push(h(e)),await Promise.all(r),p={...p,...a.languages},b.splice(b.indexOf(e),1),n()}))}))}let x=function e(t,n){return n||(n=chrome.i18n.getUILanguage()),n=f(n),new Promise((async a=>{if(await v(n),void 0!==p[n]){if(["name","header.language"].includes(t)&&void 0!==p[n].name)return a(p[n].name);if(["loading","header.loader.phrases"].includes(t)&&void 0!==p[n].loading)return a(p[n].loading);if(void 0!==p[n].extension&&void 0!==p[n].extension[t])return a(p[n].extension[t]);if(void 0!==p[n].presence&&void 0!==p[n].presence[t])return a(p[n].presence[t])}return a(n===d?t:await e(t,d))}))},w=function(e){return e||(e=d),e=f(e),new Promise((async t=>{await v(e),void 0===p[e]?(p.en||t({}),t({[d]:{...p.en.extension,...p.en.presence}})):t({[e]:{...p[e].extension,...p[e].presence},[d]:{...p.en.extension,...p.en.presence}})}))},m=function(e,t){return new Promise((n=>chrome.storage[e].get(t,(e=>n(e)))))},y=r(),k=o}},t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,n),r.exports}return n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={591:0},t=[[897,999]],a=()=>{};function r(){for(var a,r=0;r<t.length;r++){for(var o=t[r],s=!0,i=1;i<o.length;i++){var l=o[i];0!==e[l]&&(s=!1)}s&&(t.splice(r--,1),a=n(n.s=o[0]))}return 0===t.length&&(n.x(),n.x=()=>{}),a}n.x=()=>{n.x=()=>{},s=s.slice();for(var e=0;e<s.length;e++)o(s[e]);return(a=r)()};var o=r=>{for(var o,s,[l,c,u,d]=r,g=0,p=[];g<l.length;g++)s=l[g],n.o(e,s)&&e[s]&&p.push(e[s][0]),e[s]=0;for(o in c)n.o(c,o)&&(n.m[o]=c[o]);for(u&&u(n),i(r);p.length;)p.shift()();return d&&t.push.apply(t,d),a()},s=self.webpackChunkpmd=self.webpackChunkpmd||[],i=s.push.bind(s);s.push=o})(),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,