var pmd;pmd=(()=>{"use strict";var t={9387:(t,e,n)=>{n.d(e,{XJ:()=>a,t0:()=>r});const a="https://api.premid.app/v3/",r="RELEASE"},3216:(t,e,n)=>{n.d(e,{Vp:()=>o,vU:()=>c});var a=n(9387);const r="font-weight: 800; padding: 2px 5px; color: white;",s="RELEASE"!==a.t0;let i;function o(t,e,n=!1){(s||n)&&(l(t),console.log("%cPreMiD%cSUCCESS%c "+e,r+"border-radius: 25px 0 0 25px; background: #596cae;",r+"border-radius: 0 25px 25px 0; background: #50ff50; color: black;","color: unset;"))}function c(t,e,n=!1){(s||n)&&(l(t),console.log("%cPreMiD%cERROR%c "+e,r+"border-radius: 25px 0 0 25px; background: #596cae;",r+"border-radius: 0 25px 25px 0; background: #ff5050;","color: unset;"))}function l(t){i!==t&&(console.groupEnd(),console.group(t),i=t)}},7710:(t,e,n)=>{function a(t,e){return new Promise((n=>chrome.storage[t].get(e,(t=>n(t)))))}n.d(e,{c:()=>a})},5069:(t,e,n)=>{function a(t){for(const e in t)"object"==typeof t[e]&&a(t[e]),null!==t[e]&&void 0!==t[e]||delete t[e]}n.d(e,{Z:()=>a})},3250:(t,e,n)=>{n.d(e,{Z:()=>o,L:()=>c});var a=n(9669),r=n.n(a),s=n(9387),i=n(5069);async function o(t){const e=await r()({url:s.XJ,method:"post",data:{query:t}});return(0,i.Z)(e.data),e.data}async function c(t){const e=await o(`\n    query {\n      presences(service: "${t}") {\n        url\n        metadata {\n          author {\n            id\n            name\n          }\n          contributors {\n            id\n            name\n          }\n          altnames\n          warning\n          readLogs\n          button\n          service\n          description\n          url\n          version\n          logo\n          thumbnail\n          color\n          tags\n          category\n          iframe\n          regExp\n          iframeRegExp\n          settings {\n            id\n            title\n            icon\n            if {\n              propretyNames\n              patternProprties\n            }\n            placeholder\n            value\n            values\n            multiLanguage\n          }\n        }\n      }\n    }`);return(0,i.Z)(e.data),{data:{name:e.data.presences[0].metadata.service,url:e.data.presences[0].url,metadata:e.data.presences[0].metadata}}}},3765:(t,e,n)=>{n.d(e,{ZW:()=>s,IG:()=>l,cc:()=>u,KF:()=>g,r2:()=>p});var a=n(3216),r=n(3250);const s="en",i=3e5;let o={};function c(t){return t.split("-")[0]}async function l(t){t||(t=s),t.includes("ja")||t.includes("zh")||t.includes("ko")||(t=c(t));let e=t,n=t,i=t;switch(t){case"ja":e="ja_JP",i="ja_JP";break;case"ja_JP":n="ja";break;case"ko":e="ko_KR",i="ko_KR";break;case"ko_KR":n="ko";break;case"zh-CN":e="zh_CN",i="zh_CN";break;case"zh_CN":n="zh-CN";break;case"zh-TW":e="zh_TW",i="zh_TW";break;case"zh_TW":n="zh-TW";break;default:const t=(await(0,r.Z)('\n\t\t\tquery {\n\t\t\t\tlangFiles(project: "extension") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t}\n\t\t\t')).data.langFiles.map((t=>t.lang));if(!t.includes(n)){const a=t.findIndex((t=>t.includes(n+"_")));a>=0&&(e=t[a],n=t[a],i=t[a])}}try{const s=await(0,r.Z)(`\n\t\t\tquery {\n\t\t\t\twebsite: langFiles(project: "website", lang: "${e}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\textension: langFiles(project: "extension", lang: "${n}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\tpresence: langFiles(project: "presence", lang: "${i}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t}\n\t\t`);o[t]={name:s.data.website[0].translations["header.language"],loading:s.data.website[0].translations["header.loader.phrases"],extension:s.data.extension[0].translations,presence:s.data.presence[0].translations,updatedAt:Date.now()},(0,a.Vp)("langManager.ts",`Updated ${t} translations`)}catch(e){return void(0,a.vU)("langManager.ts",`Error while fetching langFiles of ${t} language: ${e.message}`)}o[t]&&o[t].error?o[t]=void 0:await chrome.storage.local.set({languages:o})}const d=[];async function u(t,e){return t||(t=s),e||(e=!1),t=c(t),new Promise((n=>{if(void 0!==o[t]&&n(),d.includes(t)){let e=setInterval((()=>{void 0!==o&&void 0!==o[t]&&(clearInterval(e),n())}),5)}else d.push(t),chrome.storage.local.get("languages",(async a=>{a.languages||(a.languages={});const r=[];(e&&void 0!==a.languages[s]&&Date.now()-a.languages[s].updatedAt>=i||t!==s&&void 0===a.languages[s])&&r.push(l(s)),(void 0===a.languages[t]||e&&Date.now()-a.languages[t].updatedAt>=i)&&r.push(l(t)),await Promise.all(r),o={...o,...a.languages},d.splice(d.indexOf(t),1),n()}))}))}function g(t,e){return e||(e=chrome.i18n.getUILanguage()),e=c(e),new Promise((async n=>{if(await u(e),void 0!==o[e]){if(["name","header.language"].includes(t)&&void 0!==o[e].name)return n(o[e].name);if(["loading","header.loader.phrases"].includes(t)&&void 0!==o[e].loading)return n(o[e].loading);if(void 0!==o[e].extension&&void 0!==o[e].extension[t])return n(o[e].extension[t]);if(void 0!==o[e].presence&&void 0!==o[e].presence[t])return n(o[e].presence[t])}return n(e===s?t:await g(t,s))}))}async function p(t){try{const e=await(0,r.Z)(`\n\t\t\tquery {\n\t\t\t\tlangFiles(presence: "${t.toLowerCase()}") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t\tgeneralLangFiles: langFiles(presence: "general") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t}\n\t\t`),n=[];return e.data.langFiles.length>0&&e.data.generalLangFiles.length>0?e.data.generalLangFiles.forEach((t=>{e.data.langFiles.find((e=>e.lang===t.lang))&&n.push(t.lang)})):e.data.generalLangFiles.length>0&&e.data.generalLangFiles.forEach((t=>{n.push(t.lang)})),n}catch(t){return[]}}},7899:(t,e,n)=>{n.r(e),n.d(e,{presenceScience:()=>c,updatePresences:()=>l,addPresence:()=>d,initPresenceLanguages:()=>g});var a=n(3765),r=n(3216),s=n(3250),i=n(7710),o=n(4586);async function c(){let t=(await(0,i.c)("local","identifier")).identifier,e=(await(0,i.c)("local","presences")).presences;t||(t=(0,o.Z)(),chrome.storage.local.set({identifier:t}));const n=await new Promise((t=>chrome.runtime.getPlatformInfo((e=>t({os:e.os,arch:e.arch}))))),a=e.filter((t=>!t.tmp)).map((t=>t.metadata.service));(0,s.Z)(`\n\tmutation {\n\t\taddScience(identifier: "${t}", presences: ["${a.toString().split(",").join('", "')}"], os: "${n.os}", arch:"${n.arch}") {\n\t\t\tidentifier\n\t\t}\n\t}\n\t`)}async function l(){let t,e=(await(0,i.c)("local","presences")).presences;if(!e||0===e.length)return;try{const e=(await(0,s.Z)("\n\t\t\tquery {\n  \t\t\tpresences {\n    \t\t\turl\n    \t\t\tmetadata {\n      \t\t\tservice\n      \t\t\tversion\n    \t\t\t}\n  \t\t\t}\n\t\t\t}\n\t\t")).data,n=[];e.presences.forEach((t=>{n.push({name:t.metadata.service,url:t.url,version:t.metadata.version})})),t=n}catch(t){return void(0,r.vU)("presenceManager.ts","Error while updating presences: "+t.message)}let n=e.filter((t=>!t.tmp)).map((t=>({name:t.metadata.service,version:t.metadata.version}))).filter((e=>t.find((t=>t.name==e.name&&t.version!==e.version))));Promise.all(n.map((async t=>{const n=e.findIndex((e=>e.metadata.service===t.name&&!t.tmp)),a=(await(0,s.Z)(`\n\t\t\tquery {\n\t\t\t\tpresences(service: "${t.name}") {\n\t\t\t\t\tpresenceJs\n\t\t\t\t\tiframeJs\n\t\t\t\t\tmetadata {\n\t\t\t\t\t\tauthor {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontributors {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t\taltnames\n\t\t\t\t\t\twarning\n\t\t\t\t\t\treadLogs\n\t\t\t\t\t\tservice\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\turl\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tlogo\n\t\t\t\t\t\tthumbnail\n\t\t\t\t\t\tcolor\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tcategory\n\t\t\t\t\t\tiframe\n\t\t\t\t\t\tregExp\n\t\t\t\t\t\tiframeRegExp\n\t\t\t\t\t\tbutton\n\t\t\t\t\t\twarning\n\t\t\t\t\t\tsettings {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ticon\n\t\t\t\t\t\t\tif {\n\t\t\t\t\t\t\t\tpropretyNames\n\t\t\t\t\t\t\t\tpatternProprties\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplaceholder\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tvalues\n\t\t\t\t\t\t\tmultiLanguage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t`)).data,r=a.presences[0].metadata,i=[a.presences[0].presenceJs,r.iframe?a.presences[0].iframeJs:void 0].filter((t=>t));e[n].metadata=r,e[n].presence=i[0],2==i.length&&(e[n].iframe=i[1])}))).then((()=>{chrome.storage.local.set({presences:[...e]},(()=>{n.map((e=>(0,r.Vp)("presenceDevManager.ts",`Updated ${e.name} from v${e.version} to v${t.find((t=>t.name===e.name)).version}`)))}));const s=n.map((t=>t.name));e.filter((t=>s.includes(t.metadata.service))).forEach((async t=>{await g(t);const e="pSettings_"+t.metadata.service,n=(await(0,i.c)("local",e))[e];if(n){const t=n.find((t=>void 0!==t.multiLanguage));if(t&&t.values){const e=t.values.map((t=>t.value));await Promise.all(e.map((t=>(0,a.cc)(t,!0))))}}}))}))}async function d(t){let e=(await(0,i.c)("local","presences")).presences;if(e||(e=[]),"string"==typeof t){if(e.filter((t=>!t.tmp)).find((e=>e.metadata.service===t)))return void(0,r.vU)("presenceManager",`Presence ${t} already added.`)}else{const n=t.filter((t=>!e.map((t=>t.metadata.service)).includes(t)));if(0===n.length)return void(0,r.vU)("presenceManager","Presences already added.");t=n}if("string"==typeof t)(0,s.L)(t).then((async({data:t})=>{if(void 0!==t.metadata.button&&!t.metadata.button)return;const n=(await(0,s.Z)(`\n\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\tpresences(service: "${t.metadata.service}") {\n    \t\t\t\t\tpresenceJs\n    \t\t\t\t\tiframeJs\n    \t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`)).data.presences[0],a={metadata:t.metadata,presence:n.presenceJs,enabled:!0};void 0!==t.metadata.iframe&&t.metadata.iframe&&(a.iframe=n.iframeJs),e.push(a),chrome.storage.local.set({presences:e}),e.map((t=>{t.metadata.settings&&chrome.storage.local.set({["pSettings_"+t.metadata.service]:t.metadata.settings})}))})).catch((()=>{}));else{const n=(await Promise.all((await Promise.all(t.map((t=>(0,s.L)(t))))).map((async({data:t})=>{if(void 0!==t.metadata.button&&!t.metadata.button)return;const e=(await(0,s.Z)(`\n\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\tpresences(service: "${t.metadata.service}") {\n    \t\t\t\t\tpresenceJs\n    \t\t\t\t\tiframeJs\n    \t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`)).data.presences[0],n={metadata:t.metadata,presence:e.presenceJs,enabled:!0};return void 0!==t.metadata.iframe&&t.metadata.iframe&&(n.iframe=e.iframeJs),n})))).filter((t=>void 0!==t));chrome.storage.local.set({presences:e.concat(n)}),e.concat(n).map((t=>{t.metadata.settings&&(chrome.storage.local.set({["pSettings_"+t.metadata.service]:t.metadata.settings}),g(t))}))}l(),(0,a.IG)(chrome.i18n.getUILanguage())}async function u(){let t={detail:(await(0,i.c)("local","presences")).presences.filter((t=>!t.tmp)).map((t=>t.metadata.service))};"function"==typeof cloneInto&&(t=cloneInto(t,document.defaultView));const e=new CustomEvent("PreMiD_GetWebisteFallback",t);window.dispatchEvent(e)}async function g(t){if(t.metadata.settings){const e=t.metadata.settings.findIndex((t=>void 0!==t.multiLanguage));if(e>=0){const n=t.metadata.settings[e],r=await async function(t,e){switch(typeof t){case"boolean":if(!0===t)return await p(e);break;case"string":return await p(t);case"object":if(t instanceof Array){let e=[];for(const n of t)if("string"==typeof n&&n.trim().length>0){const t=await p(n);e=0===e.length?t:e.filter((e=>t.findIndex((t=>t===e))>=0))}return e}}}(n.multiLanguage,t.metadata.service);Object.keys(r).length>1?await async function(t,e){const n=t.metadata.settings.find((t=>void 0!==t.multiLanguage));let r=(await(0,i.c)("local","pSettings_"+t.metadata.service))["pSettings_"+t.metadata.service];if(!r&&t.metadata.settings&&(r=t.metadata.settings),!r.find((t=>t.id===n.id&&t.values&&t.values.length>0))){const s=chrome.i18n.getUILanguage(),i=e.find((t=>t.value===s));n.title=await(0,a.KF)("general.language",s),n.icon="fas fa-language",n.value=i?i.value:a.ZW,n.values=e;const o=r.findIndex((t=>t.id===n.id));r[o]=n,chrome.storage.local.set(JSON.parse(JSON.stringify({["pSettings_"+t.metadata.service]:r})))}}(t,r):t.metadata.settings.splice(e,1)}}}async function p(t){const e=[],n=await(0,a.r2)(t);for(const t of n)e.push({name:await(0,a.KF)("name",t),value:t});return e}"/_generated_background_page.html"!==document.location.pathname&&(document.addEventListener("DOMContentLoaded",(()=>{document.querySelector("#app")&&document.querySelector("#app").setAttribute("extension-ready","true")})),window.addEventListener("PreMiD_AddPresence",(function(t){d([t.detail])})),window.addEventListener("PreMiD_RemovePresence",(async function(t){const{presences:e}=await(0,i.c)("local","presences");chrome.storage.local.set({presences:e.filter((e=>e.metadata.service!==t.detail))}),l(),(0,a.IG)(chrome.i18n.getUILanguage())})),window.addEventListener("PreMiD_GetPresenceList",u),chrome.storage.onChanged.addListener((t=>{"presences"===Object.keys(t)[0]&&u()})))}},e={};function n(a){if(e[a])return e[a].exports;var r=e[a]={exports:{}};return t[a].call(r.exports,r,r.exports,n),r.exports}return n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var a in e)n.o(e,a)&&!n.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={293:0},e=[[7899,999]],a=()=>{};function r(){for(var a,r=0;r<e.length;r++){for(var s=e[r],i=!0,o=1;o<s.length;o++){var c=s[o];0!==t[c]&&(i=!1)}i&&(e.splice(r--,1),a=n(n.s=s[0]))}return 0===e.length&&(n.x(),n.x=()=>{}),a}n.x=()=>{n.x=()=>{},i=i.slice();for(var t=0;t<i.length;t++)s(i[t]);return(a=r)()};var s=r=>{for(var s,i,[c,l,d,u]=r,g=0,p=[];g<c.length;g++)i=c[g],n.o(t,i)&&t[i]&&p.push(t[i][0]),t[i]=0;for(s in l)n.o(l,s)&&(n.m[s]=l[s]);for(d&&d(n),o(r);p.length;)p.shift()();return u&&e.push.apply(e,u),a()},i=self.webpackChunkpmd=self.webpackChunkpmd||[],o=i.push.bind(i);i.push=s})(),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,