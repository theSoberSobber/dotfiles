var pmd;pmd=(()=>{"use strict";var e={4184:(e,t,n)=>{n.r(t);var a=n(8826);const r="font-weight: 800; padding: 2px 5px; color: white;";let o;function i(e,t,n=!1){n&&(c(e),console.log("%cPreMiD%cINFO%c "+t,r+"border-radius: 25px 0 0 25px; background: #596cae;",r+"border-radius: 0 25px 25px 0; background: #5050ff;","color: unset;"))}function s(e,t,n=!1){n&&(c(e),console.log("%cPreMiD%cERROR%c "+t,r+"border-radius: 25px 0 0 25px; background: #596cae;",r+"border-radius: 0 25px 25px 0; background: #ff5050;","color: unset;"))}function c(e){o!==e&&(console.groupEnd(),console.group(e),o=e)}function l(e){for(const t in e)"object"==typeof e[t]&&l(e[t]),null!==e[t]&&void 0!==e[t]||delete e[t]}var d=n(9669),u=n.n(d);async function g(e){const t=await u()({url:"https://api.premid.app/v3/",method:"post",data:{query:e}});return l(t.data),t.data}const p="en",f=3e5;let h={};function b(e){return e.split("-")[0]}async function w(e){e||(e=p),e.includes("ja")||e.includes("zh")||e.includes("ko")||(e=b(e));let t=e,n=e,a=e;switch(e){case"ja":t="ja_JP",a="ja_JP";break;case"ja_JP":n="ja";break;case"ko":t="ko_KR",a="ko_KR";break;case"ko_KR":n="ko";break;case"zh-CN":t="zh_CN",a="zh_CN";break;case"zh_CN":n="zh-CN";break;case"zh-TW":t="zh_TW",a="zh_TW";break;case"zh_TW":n="zh-TW";break;default:const e=(await g('\n\t\t\tquery {\n\t\t\t\tlangFiles(project: "extension") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t}\n\t\t\t')).data.langFiles.map((e=>e.lang));if(!e.includes(n)){const r=e.findIndex((e=>e.includes(n+"_")));r>=0&&(t=e[r],n=e[r],a=e[r])}}try{const o=await g(`\n\t\t\tquery {\n\t\t\t\twebsite: langFiles(project: "website", lang: "${t}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\textension: langFiles(project: "extension", lang: "${n}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\tpresence: langFiles(project: "presence", lang: "${a}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t}\n\t\t`);h[e]={name:o.data.website[0].translations["header.language"],loading:o.data.website[0].translations["header.loader.phrases"],extension:o.data.extension[0].translations,presence:o.data.presence[0].translations,updatedAt:Date.now()},function(e,t,n=!1){n&&(c("langManager.ts"),console.log("%cPreMiD%cSUCCESS%c "+t,r+"border-radius: 25px 0 0 25px; background: #596cae;",r+"border-radius: 0 25px 25px 0; background: #50ff50; color: black;","color: unset;"))}(0,`Updated ${e} translations`)}catch(t){return void s("langManager.ts",`Error while fetching langFiles of ${e} language: ${t.message}`)}h[e]&&h[e].error?h[e]=void 0:await chrome.storage.local.set({languages:h})}const v=[];function m(e,t){return t||(t=chrome.i18n.getUILanguage()),t=b(t),new Promise((async n=>{if(await async function(e,t){return e||(e=p),t||(t=!1),e=b(e),new Promise((n=>{if(void 0!==h[e]&&n(),v.includes(e)){let t=setInterval((()=>{void 0!==h&&void 0!==h[e]&&(clearInterval(t),n())}),5)}else v.push(e),chrome.storage.local.get("languages",(async a=>{a.languages||(a.languages={});const r=[];(t&&void 0!==a.languages.en&&Date.now()-a.languages.en.updatedAt>=f||e!==p&&void 0===a.languages.en)&&r.push(w(p)),(void 0===a.languages[e]||t&&Date.now()-a.languages[e].updatedAt>=f)&&r.push(w(e)),await Promise.all(r),h={...h,...a.languages},v.splice(v.indexOf(e),1),n()}))}))}(t),void 0!==h[t]){if(["name","header.language"].includes(e)&&void 0!==h[t].name)return n(h[t].name);if(["loading","header.loader.phrases"].includes(e)&&void 0!==h[t].loading)return n(h[t].loading);if(void 0!==h[t].extension&&void 0!==h[t].extension[e])return n(h[t].extension[e]);if(void 0!==h[t].presence&&void 0!==h[t].presence[e])return n(h[t].presence[e])}return n(t===p?e:await m(e,p))}))}let y,x=null;const k=chrome.runtime.connect({name:"contentScript"});window.addEventListener("PreMiD_UpdatePresence",(async e=>{try{const t=JSON.parse(decodeURIComponent(await async function(e){const t=await async function(){if(y)return y;const e=(await("local","identifier",new Promise((e=>chrome.storage.local.get("identifier",(t=>e(t))))))).identifier;let t;if(e.length>=32)t=32;else if(e.length>=24)t=24;else{if(!(e.length>=16))return s("contentScript.ts","String is not long enough to create decryption key."),new Uint8Array;t=16}return y=a.utils.utf8.toBytes(e.substring(0,t)),y}();if(t.length>0){const n=new a.ModeOfOperation.ctr(t),r=a.utils.hex.toBytes(e),o=n.decrypt(r);return a.utils.utf8.fromBytes(o)}return""}(e.detail)));l(t),k.postMessage({action:"updatePresence",presence:t})}catch(e){if(!(e instanceof SyntaxError))throw e;s("contentScript.ts","Data could not be decrypted into JSON object.")}})),chrome.runtime.onMessage.addListener((function(e){null!==k&&(void 0!==e.iFrameData&&window.dispatchEvent(new CustomEvent("PreMiD_iFrameData",{detail:e.iFrameData})),void 0!==e.tabPriority&&(e.tabPriority?null===x&&(i("contentScript.ts","Tab Priority: "+e.tabPriority),x=window.setInterval((()=>{chrome.runtime.sendMessage({iFrameUpdateData:!0}),document.dispatchEvent(new CustomEvent("PreMiD_UpdateData")),i("contentScript.ts","updateData")}),100)):(clearInterval(x),x=null)))})),window.addEventListener("PreMiD_RequestExtensionData",(async function(e){let t=e.detail.strings;const n=e.detail.language;(await Promise.all(Object.keys(t).map((e=>m(t[e],n))))).map(((e,n)=>t[Object.keys(t)[n]]=e)),window.dispatchEvent(new CustomEvent("PreMiD_ReceiveExtensionData",{detail:{strings:t}}))}))}},t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,n),r.exports}return n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={300:0},t=[[4184,999]],a=()=>{};function r(){for(var a,r=0;r<t.length;r++){for(var o=t[r],i=!0,s=1;s<o.length;s++){var c=o[s];0!==e[c]&&(i=!1)}i&&(t.splice(r--,1),a=n(n.s=o[0]))}return 0===t.length&&(n.x(),n.x=()=>{}),a}n.x=()=>{n.x=()=>{},i=i.slice();for(var e=0;e<i.length;e++)o(i[e]);return(a=r)()};var o=r=>{for(var o,i,[c,l,d,u]=r,g=0,p=[];g<c.length;g++)i=c[g],n.o(e,i)&&e[i]&&p.push(e[i][0]),e[i]=0;for(o in l)n.o(l,o)&&(n.m[o]=l[o]);for(d&&d(n),s(r);p.length;)p.shift()();return u&&t.push.apply(t,u),a()},i=self.webpackChunkpmd=self.webpackChunkpmd||[],s=i.push.bind(i);i.push=o})(),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,