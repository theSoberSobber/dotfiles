var pmd;pmd=(()=>{var e={9729:(e,t,a)=>{"use strict";a.r(t);var n=a(9387),s=a(7710),r=a(7899);async function i(){let e=(await(0,s.c)("local","defaultAdded")).defaultAdded;if(e)return;const t=["YouTube","YouTube Music","Netflix","Twitch","SoundCloud"];await(0,r.addPresence)(t),e=!0;let a=(await(0,s.c)("local","presences")).presences.map((e=>e.metadata.service));for(const n of t)if(!a.includes(n)){e=!1;break}(0,s.p)("local",{defaultAdded:e})}var o=a(3216),c=a(3250);function d(){return-1!==navigator.userAgent.indexOf("Safari")&&-1===navigator.userAgent.indexOf("Chrome")}async function l(e){const t=await new Promise((t=>{chrome.tabs.executeScript(e,{code:"try{PreMiD_Presence}catch(_){false}"},t)}));return!!t&&t[0]}var m=a(5069);async function u(e){if(e){const e=await(0,c.Z)("\n\t\tquery {\n\t\t\tversions {\n\t\t\t\tsafari {\n\t\t\t\t\tversion\n\t\t\t\t\turgent\n\t\t\t\t}\n\t\t\t}\n\t\t}");if((0,m.Z)(e.data),e.data.versions.safari.version===chrome.runtime.getManifest().version_name)return chrome.browserAction.setBadgeText({text:""}),{latestVersion:!0,urgentUpdate:!1};{const t=e.data.versions.safari.urgent;return chrome.browserAction.setBadgeText({text:"!"}),chrome.browserAction.setBadgeBackgroundColor({color:"#ff5050"}),{latestVersion:!1,urgentUpdate:t}}}return{latestVersion:!0,urgentUpdate:!1}}async function p(e,t){return!((await u(d())).urgentUpdate&&!(await u(d())).latestVersion)&&!await l(e)&&new Promise((async a=>{const n=(await(0,s.c)("local","identifier")).identifier;let r="";t.metadata.readLogs&&(r='\n\t\t\t\tconst PreMiD_consoleLogger = document.createElement("script");\n\t\t\t\tPreMiD_consoleLogger.type = "text/javascript";\n\t\t\t\tPreMiD_consoleLogger.id = "PreMiD_consoleLogger";\n\t\t\t\tPreMiD_consoleLogger.innerText = `\n\t\t\t\tconsole.stdlog = console.log.bind(console);\n\t\t\t\tconsole.logs = [];\n\t\t\t\tconsole.log = function() {\n\t\t\t\t\tlet inc = Array.from(arguments);\n\t\t\t\t\tinc.forEach(arg => {\n\t\t\t\t\t\tconsole.logs.push(arg);\n\t\t\t\t\t});\n\t\t\t\t\twhile (console.logs.length > 100) {\n\t\t\t\t\t\tconsole.logs.shift();\n\t\t\t\t\t}\n\t\t\t\t\tconsole.stdlog.apply(console, arguments);\n\t\t\t\t};\n\t\t\t\t`;\n\t\t\t\tdocument.head.appendChild(PreMiD_consoleLogger);\n\t\t\t\t'.replace(/(\r\n)|\n/g,"")),chrome.tabs.executeScript(e,{code:`let PreMiD_Presence=true;let PreMiD_Identifier="${n}";let PMD_Info={tabId:${e}};let PreMiD_Metadata=${JSON.stringify(t.metadata)};`+t.presence+r,runAt:"document_start"},a),(0,o.Vp)("injectPresence.ts","Injected "+t.metadata.service),t.metadata.readLogs&&(0,o.Vp)("injectPresence.ts","Reading logs")}))}let g,f=null,h=null;async function v(e){let t=await new Promise((e=>chrome.windows.getLastFocused(e))),a=(await new Promise((e=>chrome.tabs.query({active:!0,windowId:t.id},(t=>e(t))))))[0],n=(await(0,s.c)("local","presences")).presences;if(!a?.url||a.url.startsWith("chrome")||a.url.startsWith("edge"))return;let r=await new Promise((e=>chrome.tabs.executeScript(a.id,{code:"try{document.querySelector('meta[name=\"PreMiD_Presence\"]').content}catch(e){false}"},(t=>{e(t?t[0]:void 0)}))));if(n=n.filter((e=>{if(e.metaTag&&e.metadata.service===r)return!1;let t=null;return!!e.enabled&&(void 0!==e.metadata.regExp?(t=a.url.match(new RegExp("^(https?:|file:[/]?)[/]{2}"+e.metadata.regExp)),null!==t&&t.length>0):(t=Array.isArray(e.metadata.url)?e.metadata.url.filter((e=>new URL(a.url).hostname===e)).length>0:new URL(a.url).hostname===e.metadata.url,t))})),0===n.length&&r){const e=(await(0,c.L)(r)).data.metadata,t={metadata:e,presence:null,enabled:!0,metaTag:!0,hidden:!1},a=(await(0,c.Z)(`\n\t\t\tquery {\n\t\t\t\tpresences(service: "${r}") {\n\t\t\t\t\tpresenceJs\n\t\t\t\t\t${e.iframe?"iframeJs":""}\n\t\t\t\t}\n\t\t\t}\n\t\t`)).data.presences[0];t.presence=a.presenceJs,e.iframe&&(t.iframe=a.iframeJs),n=[t],chrome.storage.local.get("presences",(e=>{const a=e.presences.findIndex((e=>e.metadata.service===t.metadata.service&&e.metaTag===t.metaTag));if(a>-1){const n=e.presences[a].enabled,s=t;s.enabled=n,s.hidden=!1,e.presences[a]=s}else e.presences.push(t);chrome.storage.local.set(e)}))}if(n.length>0){const t=await l(a.id);f?g||f===a.id?f===a.id&&!t&&e&&e.status&&"complete"===e.status&&(null!==h&&h.metadata.service!==n[0].metadata.service&&j(),await p(f,n[0]),chrome.tabs.sendMessage(f,{tabPriority:!0}),h=n[0],w()):g=window.setTimeout((async()=>{j(),chrome.tabs.sendMessage(f,{tabPriority:!1}),f=a.id,t||await p(f,n[0]),h=n[0],chrome.tabs.sendMessage(f,{tabPriority:!0}),w(),g=null}),5e3):(h=n[0],f=a.id,t||await p(f,n[0]),chrome.tabs.sendMessage(f,{tabPriority:!0}),w())}else f===a.id&&(h=null,j(!0)),clearTimeout(g),g=null}function w(){chrome.storage.local.get("presences",(({presences:e})=>{const t=e.findIndex((e=>e.metaTag&&e.hidden&&e.metadata.service===h.metadata.service)),a=e.findIndex((e=>e.metaTag&&!e.hidden&&e.metadata.service!==h.metadata.service));t>-1&&(e[t].hidden=!1),a>-1&&(e[a].hidden=!0),chrome.storage.local.set({presences:e})}))}function y(){chrome.storage.local.get("presences",(({presences:e})=>{const t=e.findIndex((e=>e.metaTag&&!e.hidden));t>-1&&(e[t].hidden=!0),chrome.storage.local.set({presences:e})}))}var b=a(6809);function P(e){let t,a={};for(t in e)a[t]=e[t];return a}async function x(e,t){if(["ALPHA","BETA"].includes(n.t0)){const{authorizedBetaAlpha:e}=await(0,s.c)("local","authorizedBetaAlpha");if(!e)return}if((await u(d())).urgentUpdate&&!(await u(d())).latestVersion)return!1;if(t||(t=(await(0,s.c)("sync","settings")).settings),null==e||!t.enabled.value)return;const a=P(e);a.trayTitle&&t.titleMenubar.value&&a.trayTitle.trim()?a.trayTitle=a.trayTitle.trim():a.trayTitle="",t.mediaKeys.value||(a.mediaKeys=!1),a.presenceData.details&&(a.presenceData.details.length<3?a.presenceData.details="   "+a.presenceData.details:a.presenceData.details=a.presenceData.details.slice(0,128).trim()),a.presenceData.state&&(a.presenceData.state.length<3?a.presenceData.state="   "+a.presenceData.state:a.presenceData.state=a.presenceData.state.slice(0,128).trim()),T.connected&&T.emit("setActivity",a),(0,o.um)("setActivity.ts","setActivity")}var L=a(3765);let M=null,A=null;chrome.runtime.onConnect.addListener((function(e){!function(e){if("tabs"===e.name){const t=()=>{e.postMessage({connected:T.connected})};t(),T.on("connect",t),T.on("disconnect",t),e.onDisconnect.addListener((()=>{T.removeListener("connect",t),T.removeListener("disconnect",t)}))}}(e),function(e){if("popup"===e.name){const t=async()=>{e.postMessage({connected:T.connected,appVersionSupported:E(),latestExtensionVersion:await u(d())})};t(),T.on("connect",t),T.on("disconnect",t),e.onDisconnect.addListener((()=>{T.removeListener("connect",t),T.removeListener("disconnect",t)})),e.onMessage.addListener((async e=>{"loadLocalPresence"===e.action&&T.connected?T.emit("selectLocalPresence"):"popupOpened"===e.action&&await(0,L.XP)()}))}}(e),async function(e){"contentScript"===e.name&&e.onMessage.addListener((async e=>{if(void 0===e.presence||void 0===e.presence.presenceData)return;const t=await new Promise((e=>chrome.runtime.getPlatformInfo((t=>e({os:t.os,arch:t.arch}))))),a=String.fromCodePoint(128039);var n;if(void 0!==e.presence.presenceData.largeImageKey&&(e.presence.presenceData.largeImageText=`PreMiD ${"linux"===t.os||"cros"===t.os?a:""} v${n=k,Array.from(String(n)).reverse().map(((e,t)=>t%1==0&&t>0?e+".":e)).reverse().join("")} ${String.fromCharCode(8226)} Ext v${chrome.runtime.getManifest().version_name}`),null==M)return M=P(e.presence.presenceData),A=e.presence,void x(e.presence);const s=P(M);delete s.startTimestamp,delete s.endTimestamp;const r=P(e.presence.presenceData);delete r.startTimestamp,delete r.endTimestamp,(!function(e,t){const a=Object.getOwnPropertyNames(e),n=Object.getOwnPropertyNames(t);if(a.length!=n.length)return!1;for(let n=0;n<a.length;n++){const s=a[n];if(e[s]!==t[s])return!1}return!0}(s,r)||M.endTimestamp+1!==e.presence.presenceData.endTimestamp&&M.endTimestamp-1!==e.presence.presenceData.endTimestamp&&M.endTimestamp!==e.presence.presenceData.endTimestamp)&&(A=e.presence,x(e.presence)),(void 0!==M.startTimestamp&&void 0===e.presence.presenceData.startTimestamp||void 0===M.startTimestamp&&void 0!==e.presence.presenceData.startTimestamp||void 0!==M.endTimestamp&&void 0===e.presence.presenceData.endTimestamp||void 0===M.endTimestamp&&void 0!==e.presence.presenceData.endTimestamp)&&(A=e.presence,x(e.presence)),M=P(e.presence.presenceData)}))}(e),function(e){"app.ts"===e.name&&e.onMessage.addListener((async t=>{if("reinit"===t.action){await(0,s.p)("local",{defaultAdded:!1});let t=!1;if(navigator.onLine)try{await B(),t=!0}catch(e){}e.postMessage({action:"reinit",success:t})}}))}(e)}));let D=[];const T=b.connect("http://localhost:3020",{autoConnect:!1}),_=()=>T.open();let k=0,S=null;function E(){return k>=n.tn||0===k?(chrome.browserAction.setBadgeText({text:""}),!0):(chrome.browserAction.setBadgeText({text:"!"}),chrome.browserAction.setBadgeBackgroundColor({color:"#ff5050"}),!1)}function j(e=!1){(0,o.um)("clearActivity.ts","Clear Activity | "+e),e&&(chrome.tabs.sendMessage(f,{tabPriority:!1}),f=null),T.connected&&T.emit("clearActivity")}T.on("connect",(async()=>{chrome.browserAction.setBadgeText({text:""}),T.emit("getVersion"),S=window.setTimeout((()=>{k=-1,(0,o.vU)("socketManager.ts","Unsupported app version")}),5e3);let e=(await(0,s.c)("sync","settings")).settings;e=Object.assign({},...Object.keys(e).map((t=>({[t]:e[t].value})))),T.emit("settingUpdate",e)})),T.on("receiveVersion",(e=>{clearTimeout(S),k=e,E()?((0,o.um)("socketManager.ts","Supported app version"),A&&x(A),(0,o.Vp)("socketManager.ts","Connected to application"),chrome.runtime.sendMessage({socket:T.connected}),null!==f&&chrome.tabs.sendMessage(f,{tabPriority:!0})):(0,o.vU)("socketManager.ts","Unsupported app version")})),T.on("disconnect",(()=>{chrome.browserAction.setBadgeText({text:"!"}),chrome.browserAction.setBadgeBackgroundColor({color:"#e1e100"}),(0,o.vU)("socketManager.ts","Disconnected from application"),chrome.runtime.sendMessage({socket:T.connected}),chrome.storage.local.get("presences",(({presences:e})=>{e=e.filter((e=>!e.tmp)),chrome.storage.local.set({presences:e})})),null!==f&&chrome.tabs.sendMessage(f,{tabPriority:!1})})),T.on("localPresence",(async function(e){D=[],(0,o.um)("presenceDevManager.ts","Local Presence update");let t=(e=e.files).find((e=>"metadata.json"===e.file.toLowerCase())),a=e.find((e=>"presence.js"===e.file.toLowerCase())),n=e.find((e=>"iframe.js"===e.file.toLowerCase()));t?(t=t.contents,void 0!==t.iframe&&t.iframe&&!n&&D.push("No iframe.js found."),void 0===t.service&&D.push("property service not defined."),"object"!=typeof t.author?D.push("property author not defined."):(void 0===t.author.name&&D.push("property author.name not defined."),void 0===t.author.id&&D.push("property author.id not defined.")),"object"!=typeof t.description?D.push("property description not defined."):void 0===t.description.en&&D.push("property description.en not defined."),void 0===t.url&&D.push("property url not defined.")):D.push("No metadata.json found."),a||D.push("No presence.js found."),D.map((e=>(0,o.vU)("presenceDevManager.ts",e,!0)));let i=(await(0,s.c)("local","presences")).presences;i=i.filter((e=>!e.tmp));const c=i.find((e=>e.metadata.service===t.service));c&&(c.enabled=!1);const d={enabled:!0,metadata:t,presence:a?.contents,tmp:!0};void 0!==t?.iframe&&t?.iframe&&(d.iframe=n.contents),d.metadata.settings&&(chrome.storage.local.set({["pSettings_"+d.metadata.service]:d.metadata.settings}),(0,r.initPresenceLanguages)(d)),i.push(d),chrome.storage.local.set({presences:i});for(let e=0;e<i.length;e++)if(i[e].tmp){const t=i[e];chrome.tabs.query({windowType:"normal"},(e=>{for(let a=0;a<e.length;a++){let n=new URL(e[a].url);("string"==typeof t.metadata.url&&t.metadata.url===n.hostname||t.metadata.url instanceof Array&&t.metadata.url.includes(n.hostname)||t.metadata.regExp&&new RegExp(t.metadata.regExp).test(n.href))&&chrome.tabs.reload(e[a].id,{bypassCache:!0},(()=>{console.info(`Presence ${t.metadata.service} updated, tab reloaded!`)}))}}))}})),T.on("discordUser",(async e=>{if(!e)return;const{premium_type:t,...a}=e;chrome.storage.local.set({discordUser:a})}));var U=a(9669),I=a.n(U);let $=null;async function C(){(await(0,s.c)("local","presences")).presences||await new Promise((e=>chrome.storage.local.set({presences:[]},e))),$=(await(0,s.c)("sync","settings")).settings,void 0===$&&($={}),F("enabled","popup.setting.enabled",0),F("autoLaunch","popup.setting.autoLaunch",1),F("mediaKeys","popup.setting.mediaControl",2),F("titleMenubar","popup.setting.titleMenubar",3),await new Promise((e=>chrome.storage.sync.set({settings:$},e))),(0,o.um)("initSettings.ts","Initialized settings")}function F(e,t,a,n=!0,s=!0){void 0===$[e]&&function(e,t,a,n,s){$[e]||($[e]={string:t,value:n,position:a},s&&($[e].show=s))}(e,t,a,n,s)}async function B(){await async function(){console.log(`%cPreMiD\n%c${String.fromCharCode(169)} 2018-${(new Date).getFullYear()} Timeraa\n\n%cVersion: %c${chrome.runtime.getManifest().version_name}\n%cRelease type: %c${n.t0}\n%cReq App build: %c${n.tn}\n%cScience Id: %c${(await(0,s.c)("local","identifier")).identifier}`,"font-family:sans-serif;font-size:2.5rem;font-weight:bold;color: #596cae","font-size:1rem;font-weight:bold;color:rgb(70,200,70);","font-size:1rem;","font-size:1rem;color:#99AAB5;","font-size:1rem;","font-size:1rem;color:#99AAB5;","font-size:1rem;","font-size:1rem;color:#99AAB5;","font-size:1rem;","font-size:1rem;color:#99AAB5;")}(),["ALPHA","BETA"].includes(n.t0)&&await async function(){const{authorizedBetaAlpha:e}=await(0,s.c)("local","authorizedBetaAlpha");if(!e){let e="https://cpoegcmgabanfledhkjdicdclgpmghog.chromiumapp.org";"undefined"!=typeof browser&&(e=await browser.identity.getRedirectURL());const t=await new Promise((t=>chrome.identity.launchWebAuthFlow({url:"https://discordapp.com/api/oauth2/authorize?response_type=token&client_id=503557087041683458&scope=identify&redirect_uri="+e,interactive:!0},(async e=>{if(!e||!e.match(/(&access_token=[\d\w]+)/g))return chrome.runtime.lastError,void t();const a=e.match(/(&access_token=[\d\w]+)/g)[0].replace("&access_token=",""),s=(await I()("https://discordapp.com/api/users/@me",{headers:{Authorization:"Bearer "+a}})).data,r=(await(0,c.Z)(`\n\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\talphaBetaAccess(userId: "${s.id}") {\n\t\t\t\t\t\t\t\tbetaAccess\n\t\t\t\t\t\t\t\talphaAccess\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t`)).data.alphaBetaAccess[0];let i;switch(n.t0){case"BETA":i=r.betaAccess;break;case"ALPHA":i=r.alphaAccess}t(i)}))));chrome.storage.local.set({authorizedBetaAlpha:t})}}(),chrome.browserAction.setBadgeText({text:"!"}),chrome.browserAction.setBadgeBackgroundColor({color:"#e1e100"}),await Promise.all([C(),i(),(0,r.updatePresences)(),(0,L.IG)(chrome.i18n.getUILanguage()),(0,r.presenceScience)()]),setInterval((function(){(0,r.presenceScience)()}),18e5),_()}chrome.storage.onChanged.addListener((e=>{if(e.settings){const t=Object.assign({},...Object.keys(e.settings.newValue).map((t=>({[t]:e.settings.newValue[t].value}))));t.enabled?x(A,e.settings.newValue):null!==f&&j(!0),T.connected&&T.emit("settingUpdate",t),(0,o.um)("initSettings.ts","Settings update")}if(e.presences&&e.presences.newValue!==e.presences.oldValue){const t=e.presences.oldValue;e.presences.newValue.filter((e=>t.find((t=>t.metadata.service===e.metadata.service&&(t.metadata.version!==e.metadata.version||t.tmp))))).forEach((e=>{const t=e.metadata.settings;chrome.storage.local.get("pSettings_"+e.metadata.service,(a=>{a=a["pSettings_"+e.metadata.service]||[],t.forEach((e=>{const t=a.find((t=>t.id===e.id));t&&null!==t.value&&(typeof e.value==typeof t.value?e.value=t.value:t.multiLanguage&&(e=t))})),chrome.storage.local.set(JSON.parse(JSON.stringify({["pSettings_"+e.metadata.service]:t})),(()=>{(0,o.um)("initSettings.ts","Updated setting storage of "+e.metadata.service)}))}))}))}})),!d()&&chrome.runtime.onUpdateAvailable.addListener((()=>chrome.runtime.reload())),chrome.tabs.onActivated.addListener((()=>v())),chrome.tabs.onReplaced.addListener(((e,t)=>{f===t&&(j(!0),y())})),chrome.tabs.onRemoved.addListener((e=>{f===e&&(j(!0),y())})),chrome.tabs.onUpdated.addListener(((e,t)=>v(t))),chrome.windows.onFocusChanged.addListener((e=>{-1!==e&&v()})),(0,r.updatePresences)(),(0,L.IG)(chrome.i18n.getUILanguage());const V=setTimeout((()=>B().then(_)),100);chrome.runtime.onInstalled.addListener((async e=>{switch(clearTimeout(V),await B(),e.reason){case"install":chrome.tabs.create({active:!0,index:0,url:chrome.runtime.getURL("html/tabs/index.html#/installed")}),chrome.storage.local.set({lastVersion:chrome.runtime.getManifest().version_name});break;case"update":!async function(){parseInt((await(0,s.c)("local","lastVersion")).lastVersion?(await(0,s.c)("local","lastVersion")).lastVersion.replace(/\./g,"").slice(0,3):0)<parseInt(chrome.runtime.getManifest().version_name.replace(/\./g,"").slice(0,3))&&(chrome.storage.local.set({lastVersion:chrome.runtime.getManifest().version_name}),await(0,L.XP)(),chrome.tabs.create({active:!0,index:0,url:chrome.runtime.getURL("html/tabs/index.html#/updated")}))}()}})),chrome.runtime.onMessage.addListener(((e,t)=>function(e,t){h&&(e.iFrameUpdateData&&void 0!==h.metadata.iframe&&h.metadata.iframe&&chrome.tabs.sendMessage(t.tab.id,{iFrameUpdateData:!0}),e.iFrameData&&chrome.tabs.sendMessage(t.tab.id,{iFrameData:e.iFrameData}),e.iFrame&&(null!==h&&void 0!==h.metadata.iframe&&h.metadata.iframe?chrome.tabs.sendMessage(t.tab.id,{iFrame:h.iframe,iFrameRegExp:h.metadata.iFrameRegExp||""}):chrome.tabs.sendMessage(t.tab.id,{iFrame:!1})))}(e,t))),chrome.storage.onChanged.addListener((async e=>{if(!e.presences||!h||!f)return;const t=(await(0,s.c)("local","presences")).presences.find((e=>e.metadata.service===h.metadata.service));t&&t.enabled?(M=null,chrome.tabs.sendMessage(f,{tabPriority:!0})):(chrome.tabs.sendMessage(f,{tabPriority:!1}),j(!0))})),chrome.storage.local.get("identifier",(e=>{e.identifier&&chrome.runtime.setUninstallURL(`${n.XJ.replace("/v3/","/v2/")}science/${e.identifier}`)}))},9387:(e,t,a)=>{"use strict";a.d(t,{XJ:()=>n,t0:()=>s,tn:()=>r});const n="https://api.premid.app/v3/",s="RELEASE",r=214},3216:(e,t,a)=>{"use strict";a.d(t,{um:()=>o,Vp:()=>c,vU:()=>d});var n=a(9387);const s="font-weight: 800; padding: 2px 5px; color: white;",r="RELEASE"!==n.t0;let i;function o(e,t,a=!1){(r||a)&&(l(e),console.log("%cPreMiD%cINFO%c "+t,s+"border-radius: 25px 0 0 25px; background: #596cae;",s+"border-radius: 0 25px 25px 0; background: #5050ff;","color: unset;"))}function c(e,t,a=!1){(r||a)&&(l(e),console.log("%cPreMiD%cSUCCESS%c "+t,s+"border-radius: 25px 0 0 25px; background: #596cae;",s+"border-radius: 0 25px 25px 0; background: #50ff50; color: black;","color: unset;"))}function d(e,t,a=!1){(r||a)&&(l(e),console.log("%cPreMiD%cERROR%c "+t,s+"border-radius: 25px 0 0 25px; background: #596cae;",s+"border-radius: 0 25px 25px 0; background: #ff5050;","color: unset;"))}function l(e){i!==e&&(console.groupEnd(),console.group(e),i=e)}},7710:(e,t,a)=>{"use strict";function n(e,t){return new Promise((a=>chrome.storage[e].get(t,(e=>a(e)))))}function s(e,t){return new Promise((a=>chrome.storage[e].set(t,a)))}a.d(t,{c:()=>n,p:()=>s})},5069:(e,t,a)=>{"use strict";function n(e){for(const t in e)"object"==typeof e[t]&&n(e[t]),null!==e[t]&&void 0!==e[t]||delete e[t]}a.d(t,{Z:()=>n})},3250:(e,t,a)=>{"use strict";a.d(t,{Z:()=>o,L:()=>c});var n=a(9669),s=a.n(n),r=a(9387),i=a(5069);async function o(e){const t=await s()({url:r.XJ,method:"post",data:{query:e}});return(0,i.Z)(t.data),t.data}async function c(e){const t=await o(`\n    query {\n      presences(service: "${e}") {\n        url\n        metadata {\n          author {\n            id\n            name\n          }\n          contributors {\n            id\n            name\n          }\n          altnames\n          warning\n          readLogs\n          button\n          service\n          description\n          url\n          version\n          logo\n          thumbnail\n          color\n          tags\n          category\n          iframe\n          regExp\n          iframeRegExp\n          settings {\n            id\n            title\n            icon\n            if {\n              propretyNames\n              patternProprties\n            }\n            placeholder\n            value\n            values\n            multiLanguage\n          }\n        }\n      }\n    }`);return(0,i.Z)(t.data),{data:{name:t.data.presences[0].metadata.service,url:t.data.presences[0].url,metadata:t.data.presences[0].metadata}}}},3765:(e,t,a)=>{"use strict";a.d(t,{ZW:()=>i,IG:()=>l,XP:()=>m,cc:()=>p,KF:()=>g,r2:()=>f});var n=a(3216),s=a(7710),r=a(3250);const i="en",o=3e5;let c={};function d(e){return e.split("-")[0]}async function l(e){e||(e=i),e.includes("ja")||e.includes("zh")||e.includes("ko")||(e=d(e));let t=e,a=e,s=e;switch(e){case"ja":t="ja_JP",s="ja_JP";break;case"ja_JP":a="ja";break;case"ko":t="ko_KR",s="ko_KR";break;case"ko_KR":a="ko";break;case"zh-CN":t="zh_CN",s="zh_CN";break;case"zh_CN":a="zh-CN";break;case"zh-TW":t="zh_TW",s="zh_TW";break;case"zh_TW":a="zh-TW";break;default:const e=(await(0,r.Z)('\n\t\t\tquery {\n\t\t\t\tlangFiles(project: "extension") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t}\n\t\t\t')).data.langFiles.map((e=>e.lang));if(!e.includes(a)){const n=e.findIndex((e=>e.includes(a+"_")));n>=0&&(t=e[n],a=e[n],s=e[n])}}try{const i=await(0,r.Z)(`\n\t\t\tquery {\n\t\t\t\twebsite: langFiles(project: "website", lang: "${t}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\textension: langFiles(project: "extension", lang: "${a}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t\tpresence: langFiles(project: "presence", lang: "${s}") {\n\t\t\t\t\ttranslations\n\t\t\t\t}\n\t\t\t}\n\t\t`);c[e]={name:i.data.website[0].translations["header.language"],loading:i.data.website[0].translations["header.loader.phrases"],extension:i.data.extension[0].translations,presence:i.data.presence[0].translations,updatedAt:Date.now()},(0,n.Vp)("langManager.ts",`Updated ${e} translations`)}catch(t){return void(0,n.vU)("langManager.ts",`Error while fetching langFiles of ${e} language: ${t.message}`)}c[e]&&c[e].error?c[e]=void 0:await chrome.storage.local.set({languages:c})}async function m(){const e=Object.keys((await(0,s.c)("local","languages")).languages);await Promise.all(e.map((e=>p(e,!0))))}const u=[];async function p(e,t){return e||(e=i),t||(t=!1),e=d(e),new Promise((a=>{if(void 0!==c[e]&&a(),u.includes(e)){let t=setInterval((()=>{void 0!==c&&void 0!==c[e]&&(clearInterval(t),a())}),5)}else u.push(e),chrome.storage.local.get("languages",(async n=>{n.languages||(n.languages={});const s=[];(t&&void 0!==n.languages[i]&&Date.now()-n.languages[i].updatedAt>=o||e!==i&&void 0===n.languages[i])&&s.push(l(i)),(void 0===n.languages[e]||t&&Date.now()-n.languages[e].updatedAt>=o)&&s.push(l(e)),await Promise.all(s),c={...c,...n.languages},u.splice(u.indexOf(e),1),a()}))}))}function g(e,t){return t||(t=chrome.i18n.getUILanguage()),t=d(t),new Promise((async a=>{if(await p(t),void 0!==c[t]){if(["name","header.language"].includes(e)&&void 0!==c[t].name)return a(c[t].name);if(["loading","header.loader.phrases"].includes(e)&&void 0!==c[t].loading)return a(c[t].loading);if(void 0!==c[t].extension&&void 0!==c[t].extension[e])return a(c[t].extension[e]);if(void 0!==c[t].presence&&void 0!==c[t].presence[e])return a(c[t].presence[e])}return a(t===i?e:await g(e,i))}))}async function f(e){try{const t=await(0,r.Z)(`\n\t\t\tquery {\n\t\t\t\tlangFiles(presence: "${e.toLowerCase()}") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t\tgeneralLangFiles: langFiles(presence: "general") {\n\t\t\t\t\tlang\n\t\t\t\t}\n\t\t\t}\n\t\t`),a=[];return t.data.langFiles.length>0&&t.data.generalLangFiles.length>0?t.data.generalLangFiles.forEach((e=>{t.data.langFiles.find((t=>t.lang===e.lang))&&a.push(e.lang)})):t.data.generalLangFiles.length>0&&t.data.generalLangFiles.forEach((e=>{a.push(e.lang)})),a}catch(e){return[]}}},7899:(e,t,a)=>{"use strict";a.d(t,{presenceScience:()=>c,updatePresences:()=>d,addPresence:()=>l,initPresenceLanguages:()=>u});var n=a(3765),s=a(3216),r=a(3250),i=a(7710),o=a(4586);async function c(){let e=(await(0,i.c)("local","identifier")).identifier,t=(await(0,i.c)("local","presences")).presences;e||(e=(0,o.Z)(),chrome.storage.local.set({identifier:e}));const a=await new Promise((e=>chrome.runtime.getPlatformInfo((t=>e({os:t.os,arch:t.arch}))))),n=t.filter((e=>!e.tmp)).map((e=>e.metadata.service));(0,r.Z)(`\n\tmutation {\n\t\taddScience(identifier: "${e}", presences: ["${n.toString().split(",").join('", "')}"], os: "${a.os}", arch:"${a.arch}") {\n\t\t\tidentifier\n\t\t}\n\t}\n\t`)}async function d(){let e,t=(await(0,i.c)("local","presences")).presences;if(!t||0===t.length)return;try{const t=(await(0,r.Z)("\n\t\t\tquery {\n  \t\t\tpresences {\n    \t\t\turl\n    \t\t\tmetadata {\n      \t\t\tservice\n      \t\t\tversion\n    \t\t\t}\n  \t\t\t}\n\t\t\t}\n\t\t")).data,a=[];t.presences.forEach((e=>{a.push({name:e.metadata.service,url:e.url,version:e.metadata.version})})),e=a}catch(e){return void(0,s.vU)("presenceManager.ts","Error while updating presences: "+e.message)}let a=t.filter((e=>!e.tmp)).map((e=>({name:e.metadata.service,version:e.metadata.version}))).filter((t=>e.find((e=>e.name==t.name&&e.version!==t.version))));Promise.all(a.map((async e=>{const a=t.findIndex((t=>t.metadata.service===e.name&&!e.tmp)),n=(await(0,r.Z)(`\n\t\t\tquery {\n\t\t\t\tpresences(service: "${e.name}") {\n\t\t\t\t\tpresenceJs\n\t\t\t\t\tiframeJs\n\t\t\t\t\tmetadata {\n\t\t\t\t\t\tauthor {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontributors {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t\taltnames\n\t\t\t\t\t\twarning\n\t\t\t\t\t\treadLogs\n\t\t\t\t\t\tservice\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\turl\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tlogo\n\t\t\t\t\t\tthumbnail\n\t\t\t\t\t\tcolor\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tcategory\n\t\t\t\t\t\tiframe\n\t\t\t\t\t\tregExp\n\t\t\t\t\t\tiframeRegExp\n\t\t\t\t\t\tbutton\n\t\t\t\t\t\twarning\n\t\t\t\t\t\tsettings {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ticon\n\t\t\t\t\t\t\tif {\n\t\t\t\t\t\t\t\tpropretyNames\n\t\t\t\t\t\t\t\tpatternProprties\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplaceholder\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tvalues\n\t\t\t\t\t\t\tmultiLanguage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t`)).data,s=n.presences[0].metadata,i=[n.presences[0].presenceJs,s.iframe?n.presences[0].iframeJs:void 0].filter((e=>e));t[a].metadata=s,t[a].presence=i[0],2==i.length&&(t[a].iframe=i[1])}))).then((()=>{chrome.storage.local.set({presences:[...t]},(()=>{a.map((t=>(0,s.Vp)("presenceDevManager.ts",`Updated ${t.name} from v${t.version} to v${e.find((e=>e.name===t.name)).version}`)))}));const r=a.map((e=>e.name));t.filter((e=>r.includes(e.metadata.service))).forEach((async e=>{await u(e);const t="pSettings_"+e.metadata.service,a=(await(0,i.c)("local",t))[t];if(a){const e=a.find((e=>void 0!==e.multiLanguage));if(e&&e.values){const t=e.values.map((e=>e.value));await Promise.all(t.map((e=>(0,n.cc)(e,!0))))}}}))}))}async function l(e){let t=(await(0,i.c)("local","presences")).presences;if(t||(t=[]),"string"==typeof e){if(t.filter((e=>!e.tmp)).find((t=>t.metadata.service===e)))return void(0,s.vU)("presenceManager",`Presence ${e} already added.`)}else{const a=e.filter((e=>!t.map((e=>e.metadata.service)).includes(e)));if(0===a.length)return void(0,s.vU)("presenceManager","Presences already added.");e=a}if("string"==typeof e)(0,r.L)(e).then((async({data:e})=>{if(void 0!==e.metadata.button&&!e.metadata.button)return;const a=(await(0,r.Z)(`\n\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\tpresences(service: "${e.metadata.service}") {\n    \t\t\t\t\tpresenceJs\n    \t\t\t\t\tiframeJs\n    \t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`)).data.presences[0],n={metadata:e.metadata,presence:a.presenceJs,enabled:!0};void 0!==e.metadata.iframe&&e.metadata.iframe&&(n.iframe=a.iframeJs),t.push(n),chrome.storage.local.set({presences:t}),t.map((e=>{e.metadata.settings&&chrome.storage.local.set({["pSettings_"+e.metadata.service]:e.metadata.settings})}))})).catch((()=>{}));else{const a=(await Promise.all((await Promise.all(e.map((e=>(0,r.L)(e))))).map((async({data:e})=>{if(void 0!==e.metadata.button&&!e.metadata.button)return;const t=(await(0,r.Z)(`\n\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\tpresences(service: "${e.metadata.service}") {\n    \t\t\t\t\tpresenceJs\n    \t\t\t\t\tiframeJs\n    \t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`)).data.presences[0],a={metadata:e.metadata,presence:t.presenceJs,enabled:!0};return void 0!==e.metadata.iframe&&e.metadata.iframe&&(a.iframe=t.iframeJs),a})))).filter((e=>void 0!==e));chrome.storage.local.set({presences:t.concat(a)}),t.concat(a).map((e=>{e.metadata.settings&&(chrome.storage.local.set({["pSettings_"+e.metadata.service]:e.metadata.settings}),u(e))}))}d(),(0,n.IG)(chrome.i18n.getUILanguage())}async function m(){let e={detail:(await(0,i.c)("local","presences")).presences.filter((e=>!e.tmp)).map((e=>e.metadata.service))};"function"==typeof cloneInto&&(e=cloneInto(e,document.defaultView));const t=new CustomEvent("PreMiD_GetWebisteFallback",e);window.dispatchEvent(t)}async function u(e){if(e.metadata.settings){const t=e.metadata.settings.findIndex((e=>void 0!==e.multiLanguage));if(t>=0){const a=e.metadata.settings[t],s=await async function(e,t){switch(typeof e){case"boolean":if(!0===e)return await p(t);break;case"string":return await p(e);case"object":if(e instanceof Array){let t=[];for(const a of e)if("string"==typeof a&&a.trim().length>0){const e=await p(a);t=0===t.length?e:t.filter((t=>e.findIndex((e=>e===t))>=0))}return t}}}(a.multiLanguage,e.metadata.service);Object.keys(s).length>1?await async function(e,t){const a=e.metadata.settings.find((e=>void 0!==e.multiLanguage));let s=(await(0,i.c)("local","pSettings_"+e.metadata.service))["pSettings_"+e.metadata.service];if(!s&&e.metadata.settings&&(s=e.metadata.settings),!s.find((e=>e.id===a.id&&e.values&&e.values.length>0))){const r=chrome.i18n.getUILanguage(),i=t.find((e=>e.value===r));a.title=await(0,n.KF)("general.language",r),a.icon="fas fa-language",a.value=i?i.value:n.ZW,a.values=t;const o=s.findIndex((e=>e.id===a.id));s[o]=a,chrome.storage.local.set(JSON.parse(JSON.stringify({["pSettings_"+e.metadata.service]:s})))}}(e,s):e.metadata.settings.splice(t,1)}}}async function p(e){const t=[],a=await(0,n.r2)(e);for(const e of a)t.push({name:await(0,n.KF)("name",e),value:e});return t}"/_generated_background_page.html"!==document.location.pathname&&(document.addEventListener("DOMContentLoaded",(()=>{document.querySelector("#app")&&document.querySelector("#app").setAttribute("extension-ready","true")})),window.addEventListener("PreMiD_AddPresence",(function(e){l([e.detail])})),window.addEventListener("PreMiD_RemovePresence",(async function(e){const{presences:t}=await(0,i.c)("local","presences");chrome.storage.local.set({presences:t.filter((t=>t.metadata.service!==e.detail))}),d(),(0,n.IG)(chrome.i18n.getUILanguage())})),window.addEventListener("PreMiD_GetPresenceList",m),chrome.storage.onChanged.addListener((e=>{"presences"===Object.keys(e)[0]&&m()})))},418:()=>{}},t={};function a(n){if(t[n])return t[n].exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,a),s.exports}return a.m=e,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={464:0,293:0},t=[[9729,999]],n=()=>{};function s(){for(var n,s=0;s<t.length;s++){for(var r=t[s],i=!0,o=1;o<r.length;o++){var c=r[o];0!==e[c]&&(i=!1)}i&&(t.splice(s--,1),n=a(a.s=r[0]))}return 0===t.length&&(a.x(),a.x=()=>{}),n}a.x=()=>{a.x=()=>{},i=i.slice();for(var e=0;e<i.length;e++)r(i[e]);return(n=s)()};var r=s=>{for(var r,i,[c,d,l,m]=s,u=0,p=[];u<c.length;u++)i=c[u],a.o(e,i)&&e[i]&&p.push(e[i][0]),e[i]=0;for(r in d)a.o(d,r)&&(a.m[r]=d[r]);for(l&&l(a),o(s);p.length;)p.shift()();return m&&t.push.apply(t,m),n()},i=self.webpackChunkpmd=self.webpackChunkpmd||[],o=i.push.bind(i);i.push=r})(),a.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,